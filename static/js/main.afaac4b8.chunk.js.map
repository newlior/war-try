{"version":3,"sources":["compements/Context/Context.js","compements/Deck/Deck.js","compements/img/shuffle.gif","compements/Shuffle/Shuffle.js","compements/War/War.js","App.js","serviceWorker.js","index.js"],"names":["Mycontext","React","createContext","Provider","Consumer","Deck","prop","context","deck","map","item","className","style","color","cardSymbol","cardNumber","value","Shuffle","id","src","shuffleImg","alt","onClick","actions","shuffle","War","deck1","append","App","createFullDeck","g","cards","symbol","numbers","deckArr","randDeck","forEach","i","card","push","length","rand","Math","floor","random","splice","computerBinCards","document","getElementById","playerBinCards","computerDeckCards","querySelector","playerDeckCards","computerDeckCardsCount","childElementCount","playerDeckCardsCount","hasChildNodes","console","log","appendChild","children","display","anmiton","gameCard","place","cardClass","classList","add","addEventListener","animaEnd","remove","removeEventListener","tie","playerValue","computerValue","computerDeck","playerDeck","computerCardPlace","playerCardPlace","computerBin","playerBin","undefined","setTimeout","computerDeckCard","playerDeckCard","lastChild","innerHTML","bin","z","contains","computerCard","playerCard","flag","checkDecks","exact","path","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afaac4b8.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nconst Mycontext = React.createContext();\r\n\r\nexport const Provider = Mycontext.Provider;\r\nexport const Consumer = Mycontext.Consumer;","import React from 'react';\r\nimport './deck.css';\r\nimport { Consumer } from './../Context/Context.js'; \r\n\r\nexport default function Deck(prop){\r\n    return(\r\n        <Consumer>\r\n            {\r\n                context =>{\r\n                    return(\r\n                        <div>\r\n                            {prop.deck.map(item =>{\r\n                                return(\r\n                                    <div className='card'>\r\n                                        <div className='fliper'>    \r\n                                            <div className=\"outline shadow rounded\" style={{color: item.color}}>\r\n                                                <div className=\"top\">\r\n                                                    <span>{item.cardSymbol}</span>\r\n                                                    <span className='num'>{item.cardNumber}</span>\r\n                                                </div>\r\n                                                <h1>{item.cardSymbol}</h1>\r\n                                                <div className=\"bottom\">\r\n                                                    <span className='num'>{item.cardNumber}</span>\r\n                                                    <span>{item.cardSymbol}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <p className='values'>{item.value}</p>\r\n                                            <div className='backface shadow'></div>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            )}\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        </Consumer>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/shuffle.32cd41cf.gif\";","import React from 'react';\r\nimport './shuffle.css';\r\nimport { Consumer } from './../Context/Context.js'; \r\nimport shuffleImg from './../img/shuffle.gif';\r\n\r\n\r\nexport default function Shuffle(){\r\n    return(\r\n        <Consumer>\r\n            {\r\n                context =>{\r\n                    return(\r\n                        <div id='shuffle-modal'>\r\n                            <h1>shuffling decks</h1>\r\n                            <img src={shuffleImg} alt='shuffle' />\r\n                            <div id='opti'>\r\n                                <p>the decks are ready!</p>\r\n                                <button onClick={()=>{context.actions.shuffle()}} \r\n                                className='btn'>contiue</button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        </Consumer>\r\n    )\r\n}","import React from 'react';\r\nimport './war.css';\r\nimport { Consumer } from './../Context/Context.js'; \r\nimport Deck from './../Deck/Deck.js';\r\nimport Shuffle from './../Shuffle/Shuffle.js';\r\n\r\nexport default function War(prop){\r\n    return(\r\n        <Consumer>\r\n            {\r\n                context =>{\r\n                    return(\r\n                        <div>\r\n                            <div className='board'>\r\n                                <div className='row'>\r\n                                    <div className='deck-place turned' id='computer-deck'>\r\n                                        <Deck deck={context.deck}/>\r\n                                    </div>\r\n                                    <div className='deck-place turned' id='computer-bin'></div>\r\n                                </div>\r\n\r\n                                <div className='deck-place bigger' id='computer-card'></div>\r\n                                <div className='deck-place bigger' id='player-card'></div>\r\n                                <div className='row'>\r\n                                    <div className='deck-place turned' id='player-bin'></div>\r\n                                    <div className='deck-place turned' id='player-deck'>\r\n                                        <Deck deck={context.deck1}/>\r\n                                    </div>\r\n                                </div>\r\n                                <button onClick={()=>{context.actions.append()}}>draw</button>\r\n                            </div>\r\n                            <Shuffle />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        </Consumer>\r\n    )\r\n}","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport { GiHearts, GiDiamonds, GiSpades, GiClubs } from 'react-icons/gi'\nimport { Provider } from './compements/Context/Context.js'\nimport War from './compements/War/War.js'\n\nfunction App() {\n  let createFullDeck = (g) => {\n    const cards = [\n      {\n        symbol: <GiHearts />,\n        numbers: [\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          '10',\n          'J',\n          'Q',\n          'K',\n          'A',\n        ],\n        color: 'red',\n      },\n      {\n        symbol: <GiDiamonds />,\n        numbers: [\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          '10',\n          'J',\n          'Q',\n          'K',\n          'A',\n        ],\n        color: 'red',\n      },\n      {\n        symbol: <GiSpades />,\n        numbers: [\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          '10',\n          'J',\n          'Q',\n          'K',\n          'A',\n        ],\n        color: 'black',\n      },\n      {\n        symbol: <GiClubs />,\n        numbers: [\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          '10',\n          'J',\n          'Q',\n          'K',\n          'A',\n        ],\n        color: 'black',\n      },\n    ]\n    let deckArr = [],\n      randDeck = []\n    cards.forEach((item) => {\n      for (let i = 0; i < g; i++) {\n        //item.numbers.length\n        let card = {\n          cardSymbol: item.symbol,\n          cardNumber: item.numbers[i],\n          value: i,\n          color: item.color,\n        }\n        deckArr.push(card)\n      }\n    })\n    while (randDeck.length < g) {\n      let rand = Math.floor(Math.random() * deckArr.length)\n      rand = deckArr.splice(rand, 1)\n      randDeck.push(rand[0])\n    }\n    return randDeck\n  }\n  const deck = createFullDeck(10)\n  const deck1 = createFullDeck(10)\n\n  let shuffle = () => {\n    let computerBinCards = document.getElementById('computer-bin')\n    let playerBinCards = document.getElementById('player-bin')\n    let computerDeckCards = document.querySelector('#computer-deck div')\n    let playerDeckCards = document.querySelector('#player-deck div')\n    let computerDeckCardsCount = computerDeckCards.childElementCount\n    let playerDeckCardsCount = playerDeckCards.childElementCount\n    let computerBinCardsCount = computerBinCards.childElementCount\n    let playerBinCardsCount = playerBinCards.childElementCount\n    for (\n      let i = computerDeckCardsCount - 1;\n      computerDeckCards.hasChildNodes();\n      i--\n    ) {\n      console.log(computerDeckCards.hasChildNodes())\n      computerBinCards.appendChild(computerDeckCards.children[i])\n    }\n    for (\n      let i = playerDeckCardsCount - 1;\n      playerDeckCards.hasChildNodes();\n      i--\n    ) {\n      console.log(playerDeckCards.hasChildNodes())\n      playerBinCards.appendChild(playerDeckCards.children[i])\n    }\n\n    for (\n      let i = computerBinCards.childElementCount - 1;\n      computerBinCards.hasChildNodes();\n      i--\n    ) {\n      console.log(computerBinCards.hasChildNodes() + 'b')\n      let rand = Math.floor(Math.random() * computerBinCards.childElementCount)\n      //console.log(sec.children[rand]);\n      computerDeckCards.appendChild(computerBinCards.children[rand])\n    }\n    for (\n      let i = playerBinCards.childElementCount - 1;\n      playerBinCards.hasChildNodes();\n      i--\n    ) {\n      console.log(playerBinCards.hasChildNodes() + 'b')\n      let rand = Math.floor(Math.random() * playerBinCards.childElementCount)\n      //console.log(sec.children[rand]);\n      playerDeckCards.appendChild(playerBinCards.children[rand])\n    }\n    document.getElementById('shuffle-modal').style.display = 'none'\n\n    // console.log(firstcount);\n    //console.log(seccount);\n    // console.log(rand);*/\n  }\n\n  /* let anmiton = (compCard, playCard, compPlace, playPlace, compClass, playClass)=>{\n    compCard.classList.add(compClass);\n    playCard.classList.add(playClass);\n    compCard.addEventListener('animationend', function animaEnd(){\n      compCard.classList.remove(compClass);\n      compPlace.appendChild(compCard);\n      playCard.classList.remove(playClass);\n      playPlace.appendChild(playCard);\n      compCard.removeEventListener('animationend', animaEnd);\n    });\n  }*/\n  let anmiton = (gameCard, place, cardClass) => {\n    gameCard.classList.add(cardClass)\n    gameCard.addEventListener('animationend', function animaEnd() {\n      gameCard.classList.remove(cardClass)\n      place.appendChild(gameCard)\n      gameCard.removeEventListener('animationend', animaEnd)\n    })\n  }\n\n  let checkDecks = () => {\n    let computerBin = document.getElementById('computer-bin')\n    let playerBin = document.getElementById('player-bin')\n    let computerDeck = document.querySelector('#computer-deck div')\n    let playerDeck = document.querySelector('#player-deck div')\n    if (\n      (computerBin.childElementCount === 0 &&\n        computerDeck.childElementCount === 0) ||\n      (playerBin.childElementCount === 0 && playerDeck.childElementCount === 0)\n    ) {\n      if (\n        computerBin.childElementCount === 0 &&\n        computerDeck.childElementCount === 0\n      ) {\n        console.log('player winner')\n      } else if (\n        playerBin.childElementCount === 0 &&\n        playerDeck.childElementCount === 0\n      ) {\n        console.log('computer winner')\n      }\n    } else if (\n      computerDeck.childElementCount === 0 &&\n      computerBin.childElementCount > 0\n    ) {\n      document.getElementById('shuffle-modal').style.display = 'block'\n    } else if (\n      playerDeck.childElementCount === 0 &&\n      playerBin.childElementCount > 0\n    ) {\n      document.getElementById('shuffle-modal').style.display = 'block'\n    }\n  }\n\n  /* let card1 = (computerCardPlace, playerCardPlace, computerBin, playerBin)=>{\n    let computerCardPlaceCounter = computerCardPlace.childElementCount;\n    let playerCardPlaceCounter = playerCardPlace.childElementCount;\n    let computerBinCounter = computerBin.childElementCount;\n    let playerBinCounter = playerBin.childElementCount;\n    let computerDeckCard = document.querySelector('#computer-deck .card');\n    let playerDeckCard = document.querySelector('#player-deck .card');\n    let computerCard = document.querySelector('#computer-card .card');\n    let playerCard = document.querySelector('#player-card .card');\n    anmiton(computerDeckCard, playerDeckCard, \n      computerCardPlace, playerCardPlace, 'tocomputercard', 'toplayercard');\n\n  }*/\n\n  let tie = () => {\n    let computerDeck = document.querySelector('#computer-deck div')\n    let playerDeck = document.querySelector('#player-deck div')\n    let computerCardPlace = document.getElementById('computer-card')\n    let playerCardPlace = document.getElementById('player-card')\n    let computerBin = document.getElementById('computer-bin')\n    let playerBin = document.getElementById('player-bin')\n    let playerValue, computerValue\n\n    for (let i = 0; i < 4; i++) {\n      console.log(playerDeck.children[i])\n      console.log(computerDeck.children[i])\n      if (\n        playerDeck.children[3] !== undefined &&\n        computerDeck.children[3] !== undefined\n      ) {\n        setTimeout(() => {\n          let computerDeckCard = document.querySelector('#computer-deck .card')\n          let playerDeckCard = document.querySelector('#player-deck .card')\n          playerDeckCard.classList.add('turned')\n          computerDeckCard.classList.add('turned')\n          anmiton(computerDeckCard, computerCardPlace, 'tocomputercard')\n          anmiton(playerDeckCard, playerCardPlace, 'toplayercard')\n        }, i * 3000)\n        setTimeout(() => {\n          playerValue = playerCardPlace.lastChild.querySelector('.values')\n            .innerHTML\n          computerValue = computerCardPlace.lastChild.querySelector('.values')\n            .innerHTML\n          console.log(playerValue + 'playerValiue')\n          console.log(computerValue + 'computerValiue')\n          console.log(playerCardPlace.childElementCount + 'playercount')\n          console.log(computerCardPlace.childElementCount + 'computercount')\n          if (playerValue === computerValue) {\n            bin(computerValue, playerValue)\n          } else {\n            for (let z = 0; z < playerCardPlace.childElementCount; z++) {\n              if (playerCardPlace.children[z].classList.contains('turned')) {\n                playerCardPlace.children[z].classList.remove('turned')\n                computerCardPlace.children[z].classList.remove('turned')\n              }\n              setTimeout(() => {\n                bin(computerValue, playerValue)\n              }, z * 3000)\n            }\n          }\n        }, 12200)\n      } else {\n        setTimeout(() => {\n          if (\n            playerDeck.children[0] !== undefined &&\n            computerDeck.children[0] !== undefined\n          ) {\n            let computerDeckCard = document.querySelector(\n              '#computer-deck .card',\n            )\n            let playerDeckCard = document.querySelector('#player-deck .card')\n            anmiton(computerDeckCard, computerCardPlace, 'tocomputercard')\n            anmiton(playerDeckCard, playerCardPlace, 'toplayercard')\n          } else if (\n            computerBin.childElementCount > 0 &&\n            playerBin.childElementCount > 0\n          ) {\n            shuffle()\n            let computerDeckCard = document.querySelector(\n              '#computer-deck .card',\n            )\n            let playerDeckCard = document.querySelector('#player-deck .card')\n            anmiton(computerDeckCard, computerCardPlace, 'tocomputercard')\n            anmiton(playerDeckCard, playerCardPlace, 'toplayercard')\n          } else if (\n            (computerDeck.childElementCount === 0 &&\n              computerBin.childElementCount === 0) ||\n            (playerDeck.childElementCount === 0 &&\n              playerBin.childElementCount === 0)\n          ) {\n            if (\n              computerDeck.childElementCount === 0 &&\n              computerBin.childElementCount === 0 &&\n              playerDeck.childElementCount > 0\n            ) {\n              let playerDeckCard = document.querySelector('#player-deck .card')\n              anmiton(playerDeckCard, playerCardPlace, 'toplayercard')\n            } else if (\n              playerDeck.childElementCount === 0 &&\n              playerBin.childElementCount === 0 &&\n              computerDeck.childElementCount > 0\n            ) {\n              let computerDeckCard = document.querySelector(\n                '#player-deck .card',\n              )\n              anmiton(computerDeckCard, computerCardPlace, 'tocomputercard')\n            }\n            playerValue = playerCardPlace.lastChild.querySelector('.values')\n              .innerHTML\n            computerValue = computerCardPlace.lastChild.querySelector('.values')\n              .innerHTML\n            console.log(playerCardPlace.lastChild)\n            console.log(computerCardPlace.lastChild)\n          }\n          console.log('done')\n        }, i * 3000)\n      }\n      /* setTimeout(() => {      \n          let computerDeckCard = document.querySelector('#computer-deck .card');\n          let playerDeckCard = document.querySelector('#player-deck .card');\n          let computerCard = document.querySelectorAll('#computer-card .card');\n          let playerCard = document.querySelectorAll('#player-card .card');  \n          if(computerDeck.childElementCount > 0 && playerDeck.childElementCount > 0){\n            anmiton(computerDeckCard, computerCardPlace, 'tocomputercard');\n            anmiton(playerDeckCard, playerCardPlace, 'toplayercard');\n          }else if(computerDeck.childElementCount === 0 && computerBin.childElementCount === 0\n            && playerDeck.childElementCount > 0){\n              anmiton(playerDeckCard, playerCardPlace, 'toplayercard');\n          }else if(playerDeck.childElementCount === 0 && playerBin.childElementCount === 0\n            && computerDeck.childElementCount > 0){\n              anmiton(computerDeckCard, computerCardPlace, 'tocomputercard');\n          }else if((computerDeck.childElementCount === 0 && computerBin.childElementCount > 0) ||\n            (playerDeck.childElementCount === 0 && computerBin.childElementCount > 0)){\n              shuffle();\n              setTimeout(() => {      \n                anmiton(computerDeckCard, computerCardPlace, 'tocomputercard');\n                anmiton(playerDeckCard, playerCardPlace, 'toplayercard'); \n              }, 1000);\n          }/*else if(playerDeck.childElementCount === 0 && playerBin.childElementCount === 0\n            && computerDeck.childElementCount === 0 && computerBin.childElementCount === 0){\n              if(computerCard[i] !== undifned)*/\n    }\n    /*console.log(computerCard[i + 1]);\n          computerCard[i].classList.add('turned');\n          playerCard[i].classList.add('turned');\n        }, i * 3000);\n    }\n    for (let i = 0; i < 4; i++) {\n      setTimeout(() => {\n        card1(computerCardPlace, playerCardPlace, computerBin, playerBin);\n        }, i * 3000);\n    }*/\n  }\n\n  let append = () => {\n    let computerCardPlace = document.getElementById('computer-card')\n    let playerCardPlace = document.getElementById('player-card')\n    let computerCard = document.querySelector('#computer-deck .card')\n    let playerCard = document.querySelector('#player-deck .card')\n    //anmiton(computerCard, playerCard, computerCardPlace, playerCardPlace, 'tocomputercard', 'toplayercard');\n    anmiton(computerCard, computerCardPlace, 'tocomputercard')\n    anmiton(playerCard, playerCardPlace, 'toplayercard')\n    let computerValue = computerCard.querySelector('.values').innerHTML\n    let playerValue = playerCard.querySelector('.values').innerHTML\n    setTimeout(() => {\n      bin(computerValue, playerValue)\n    }, 3000)\n  }\n\n  let bin = (computerValue, playerValue) => {\n    let computerBin = document.getElementById('computer-bin')\n    let playerBin = document.getElementById('player-bin')\n    let computerCard = document.querySelector('#computer-card .card')\n    let playerCard = document.querySelector('#player-card .card')\n    let flag = true\n    console.log(computerValue)\n    console.log(playerValue + 'p')\n    if (computerValue > playerValue) {\n      //anmiton(computerCard, playerCard, computerBin, computerBin, 'fromcomputertocomputerbin', 'fromplayertocomputerbin');\n      anmiton(computerCard, computerBin, 'fromcomputertocomputerbin')\n      anmiton(playerCard, computerBin, 'fromplayertocomputerbin')\n      console.log('com')\n    } else if (computerValue < playerValue) {\n      // anmiton(computerCard, playerCard, playerBin, playerBin, 'fromcomputertoplayerbin', 'from');\n      anmiton(computerCard, playerBin, 'fromcomputertoplayerbin')\n      anmiton(playerCard, playerBin, 'from')\n      console.log('pla')\n    } else if (computerValue === playerValue) {\n      // anmiton(computerCard, playerCard, computerBin, computerBin, 'fromcomputertocomputerbin', 'fromplayertocomputerbin');\n      console.log('draw')\n      flag = false\n      tie()\n    }\n    if (flag) {\n      setTimeout(() => {\n        checkDecks()\n      }, 4000)\n    }\n  }\n\n  return (\n    <Provider\n      value={{\n        deck: deck,\n        deck1: deck1,\n        actions: {\n          append: append,\n          shuffle: shuffle,\n        },\n      }}\n    >\n      <div className=\"App\">\n        <Router>\n          <Routes>\n            <Route exact path=\"/\" element={<War />} />\n          </Routes>\n        </Router>\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}